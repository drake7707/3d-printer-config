[toolchanger]
  params_safe_y: 201 # 41+150+10
  params_close_y: 41
  params_fast_speed: 12000 # Default is slow moves, change this to go as Go as fast as we can
  params_fast_speed_xy: 18000
  params_path_speed: 2400 #1200 # Move speed for for the actual change 1500=40mm/s, increase this to go as fast as you can

  params_dropoff_path: [{'y':9.5 ,'z':4}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}]
  params_pickup_path: [{'z':-10, 'y':16}, {'z':-10, 'y':0}, {'z':0, 'y':0, 'f':0.5}, {'y':5.5, 'z':0}, {'y':9.5, 'z':2}, {'y':9.5 ,'z':4, 'verify':1}]
  
  #params_dropoff_path: [{'z':3.5, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]
  #params_pickup_path: [{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0.5, 'y':2.5, 'f':0.5}, {'z':8, 'y':8}, ]  

  #UP params_type = 'rods_mini_hookon'   # See available paths belowAdd commentMore actions
  #UP # The dropoff path of each tool type, pickup path is the same in reverse.
  #UP params_pads_mini_path: [{'y':9 ,'z':2}, {'y':8, 'z':0}, {'y':0, 'z':0, 'f':0.5},{'y':0, 'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7,'z':-11}]
  #UP params_pads_sb_path: [{'y':9.5 ,'z':8}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'y':0, 'z':0, 'f':0.5},{'y':0, 'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7,'z':-11}]
  #UP params_rods_mini_path: [{'z':0, 'y':4}, {'z':0, 'y':0, 'f':0.5}, {'z':-6, 'y':0}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
  #UP params_rods_sb_path: [{'y':9.5 ,'z':8}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-6, 'y':0}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
  #UP params_rods_mini_hookon_path: [{'z':0, 'y':4}, {'z':0, 'y':0, 'f':0.5}, {'z':-7.3, 'y':0}, {'z':-12.3, 'y':3.5}, {'z':-12.3, 'y':16}]
  #UP params_rods_xol_path: [{'y':59, 'z':17.5},{'y':5, 'z':17.5},{'y':5, 'z':0.2},{'y':0.5, 'z':0.1},{'z':0, 'y':0, 'f':0.5},{'z':-5, 'y':0},{'z':-6, 'y':3},{'z':-8, 'y':7},{'z':-10, 'y':16}]
  
  # Parking position - per tool
  #params_park_x = 142.2
  #params_park_y = -6.0
  #params_park_z = 308.2
  
  # Default shaper params
  #params_input_shaper_type_x: 'mzv'
  #params_input_shaper_freq_x: 62.4
  #params_input_shaper_damping_ratio_x: 0.043
  #params_input_shaper_type_y: 'mzv'
  #params_input_shaper_freq_y: 88.6
  #params_input_shaper_damping_ratio_y: 0.042
  
  t_command_restore_axis: xyz # restore x and y as well so it goes to the purge tower instead of resting potentially on the print

  initialize_on: first-use
  require_tool_present: True
  verify_tool_pickup: False # we already check this in the pickup path
  
  error_gcode:
    PAUSE
    
  before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

  after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    ### load Input Shaper frequency, type and damping ratio 
    ### (if none or some params_input_shaper_* are set in tool, use default input_shaper_params)
    {% if tool.params_input_shaper_freq_x and tool.params_input_shaper_freq_y %}
      {% if tool.params_input_shaper_type_x and tool.params_input_shaper_type_y %}
        {% if tool.params_input_shaper_damping_ratio_x and tool.params_input_shaper_damping_ratio_y %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y}
        {% else %}
          SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={tool.params_input_shaper_type_x} SHAPER_TYPE_Y={tool.params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
        {% endif %}
      {% else %}
        SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
      {% endif %}
    {% else %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={params_input_shaper_freq_x} SHAPER_FREQ_Y={params_input_shaper_freq_y} SHAPER_TYPE_X={params_input_shaper_type_x} SHAPER_TYPE_Y={params_input_shaper_type_y} DAMPING_RATIO_X={params_input_shaper_damping_ratio_x} DAMPING_RATIO_Y={params_input_shaper_damping_ratio_y}
    {% endif %}
    #UP {% if not printer['gcode_macro PRINT_START'].printing %}
    #UP       STOP_TOOL_PROBE_CRASH_DETECTION
    #UP {% endif %}

  dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set fast_xy = tool.params_fast_speed_xy|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    STATUS_DOCKING T={tool.tool_number|string}
    
    #UP STOP_TOOL_PROBE_CRASH_DETECTION
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast_xy}
    ROUNDED_G0 X={x} D=150 F={fast_xy}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast_xy}
    
    #  ############## Run the path ##############
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
    {% endfor %}
    
    #M400 
    STATUS_READY T={tool.tool_number|string}

  pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set fast_xy = tool.params_fast_speed_xy|float %}
    {% set path = tool.params_pickup_path %}
    #UP {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    STATUS_DOCKING T={tool.tool_number|string}
    
    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast_xy} D=5
    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast_xy} D=5
    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast_xy} D=0
    
    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
      TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={printer[tool.extruder].target-5} #add 5deg deadband
      # Do not use M109 because tool mapping will map the tool number, instead use the temperature wait
      #M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}

    # Run the path
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
      {% if 'verify' in pos %}
        VERIFY_TOOL_DETECTED T={tool.tool_number} ASYNC=1
      {% endif %}
    {% endfor %}    
    
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast_xy} D=20
    
    {% if 'Z' in restore_position %}
      #Travel with Z 5 higher to the restore position
      ROUNDED_G0 Z={restore_position.Z + 5} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast_xy} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast_xy} D=0
    {% endif %}
    {% if 'Z' in restore_position %}
      # And then go to the actual restore Z. This prevents dragging over the print
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    ROUNDED_G0 D=0

    #M400
    {% if printer["gcode_macro PRINT_START"].printing %}
      STATUS_PRINTING T={tool.tool_number|string}
    {% else %}
      STATUS_READY T={tool.tool_number|string}
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  _INITIALIZE_FROM_DETECTED_TOOL
  VERIFY_TOOL_DETECTED
  RESUME_BASE
  
[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    {% set curpos = printer.gcode_move.gcode_position %}
    SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
    SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
    SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
