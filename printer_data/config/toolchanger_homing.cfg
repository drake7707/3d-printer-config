[homing_override]
axes: xyz
gcode:
  #_INITIALIZE_FROM_DETECTED_TOOL
  DETECT_ACTIVE_TOOL_PROBE
  _HOME

[gcode_macro _HOME]
variable_shuttle_endstop_x: 80
variable_shuttle_endstop_y: 347
variable_shuttle_tool_number: -100
gcode:

  {% if (printer.probe.active_tool_number | int) == shuttle_tool_number %}
    # There is no tool loaded, do toolless homing
    RESPOND TYPE=echo MSG='No active tool detected ({printer.probe.active_tool_number}), doing toolless homing'

    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    
    # Can't move Z first because the shuttle needs to be over the probe
    
    {% if home_all or 'X' in params %}
      _SENSORLESS_HOME_X
    {% endif %}

    {% if home_all or 'Y' in params %}
      _SENSORLESS_HOME_Y
    {% endif %}    

    # move to the shuttle probe endstop and home Z
    G90
    G0 X{shuttle_endstop_x} Y{shuttle_endstop_y} F12000
    G28 Z
    G0 Z10 F12000
    G0 X175 Y175 Z10 F12000

    _ADJUST_Z_HOME_FOR_TOOL_OFFSET
    
  {% else %}
    # There is a tool loaded, do homing as normal
    RESPOND TYPE=echo MSG='Tool {printer.probe.active_tool_number} detected, homing as normal.'
    
    INITIALIZE_TOOLCHANGER T={printer.probe.active_tool_number}
    
    {% if printer.probe.last_query  %}
           RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
    {% else %}
      SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
      {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
      {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  
      {% if home_all %}
        G90 ; absolute mode
        G28 Z
        G0 Z10 F1000
      {% endif %}
  
      {% if home_all or 'X' in params %}
        _SENSORLESS_HOME_X
      {% endif %}
  
      {% if home_all or 'Y' in params %}
        _SENSORLESS_HOME_Y
      {% endif %}
  
      {% if home_all or 'Z' in params %}
        {% set random_x = (range(-50, 50) | random) / 10 %}
        {% set random_y = (range(-50, 50) | random) / 10 %}
  
        G90 ; absolute mode
        G0 X{175.0+random_x} Y{175.0+random_y} F12000
        G28 Z
        G0 X175 Y175 Z10 F12000 # make sure to remove the random decimals, makes it easier to align via screen
        _ADJUST_Z_HOME_FOR_TOOL_OFFSET
      {% endif %}
      _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
      M400
    {% endif %}    
  {% endif %}




[gcode_macro _SENSORLESS_HOME_X]
variable_home_current: 0.49
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}    
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro _SENSORLESS_HOME_X"].home_current}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro _SENSORLESS_HOME_Y"].home_current}

    # Home
    G28 X
    # Move away
    G91
    G1 X-15 F1200
    
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _SENSORLESS_HOME_Y]
variable_home_current: 0.49
gcode:
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro _SENSORLESS_HOME_X"].home_current}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro _SENSORLESS_HOME_Y"].home_current}
    
    # Home
    G28 Y
    # Move away
    G91
    G1 Y-15 F1200

    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}


; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
variable_shuttle_tool_number: -100
gcode:
    G90 ; absolute mode
    G0 Z10 F1000
    {% if (printer.probe.active_tool_number | int) == {shuttle_tool_number} %}
      {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
      SET_KINEMATIC_POSITION Z={10.0+probe_z_offset|float}
    {% else %}
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}
    {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro TOOL_BED_MESH_CALIBRATE]
gcode:
      {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
      G90 ; absolute mode
      G0 Z10 F1000
      # Bed mesh knows about the probe offset, but not about the tool offset.
      SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
      BED_MESH_CALIBRATE
      G0 Z10 F1000
      SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}